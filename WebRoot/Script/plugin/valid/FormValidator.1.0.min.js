function hasClass(ele, cls) { return ele.className.match(new RegExp("(\\s|^)" + cls + "(\\s|$)")) } function addClass(ele, cls) { if (!this.hasClass(ele, cls)) { ele.className += " " + cls } } function removeClass(ele, cls) { if (hasClass(ele, cls)) { var reg = new RegExp("(\\s|^)" + cls + "(\\s|$)"); ele.className = ele.className.replace(reg, " ") } } var reInt = /^\s*[+-]?\d+\s*$/; var reUInt = /^\s*[+]?\d+\s*$/; var DataType = { Int16: { Name: "Int16", MaxValue: 32767, MinValue: -32768, CheckRange: function (val) { return ((isFinite(val)) && (reInt.test(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, Int32: { Name: "Int32", MaxValue: 2147483647, MinValue: -2147483648, CheckRange: function (val) { return ((isFinite(val)) && (reInt.test(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, Int64: { Name: "Int64", MaxValue: 9223372036854776000, MinValue: -9223372036854776000, CheckRange: function (val) { return ((isFinite(val)) && (reInt.test(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, UInt16: { Name: "UInt16", MaxValue: 65535, MinValue: 0, CheckRange: function (val) { return ((isFinite(val)) && (reUInt.test(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, UInt32: { Name: "UInt32", MaxValue: 4294967295, MinValue: 0, CheckRange: function (val) { return ((isFinite(val)) && (reUInt.test(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, UInt64: { Name: "UInt64", MaxValue: 18446744073709552000, MinValue: 0, CheckRange: function (val) { return ((isFinite(val)) && (reUInt.test(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, Float: { Name: "Float", MaxValue: 3.402823e+38, MinValue: -3.402823e+38, CheckRange: function (val) { return ((isFinite(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, Double: { Name: "Double", MaxValue: 1.79e+308, MinValue: -1.79e+308, CheckRange: function (val) { return ((isFinite(val)) && (this.MaxValue >= val) && (this.MinValue <= val)) } }, DateTime: { Name: "DateTime", MaxValue: new Date(9999, 12, 31, 23, 59, 59), MinValue: new Date(1, 1, 1, 0, 0, 0), CheckRange: function (val) { var temp = Date.parse(val); return ((!isNaN(temp)) && (this.MaxValue >= temp) && (this.MinValue <= temp)) } }, String: { Name: "String", IsNullOrEmpty: function (val) { return ((val == null) || (val == "")) }, IsNullOrWhiteSpace: function (val) { return (val == null) || /^\s*$/.test(val) }, Trim: function (val) { if (val != null) { return val.replace(/(^\s*)|(\s*$)/g, "") } return val } } }; function GetClosestElement(obj, tagName) { if (DataType.String.IsNullOrWhiteSpace(tagName)) { throw "tagName 不能为空!" } tagName = tagName.toUpperCase(); var node = obj.parentNode; while (node != null) { if ((node == null) || (node.tagName == tagName)) { break } node = node.parentNode } return node } function GetElementsByNameAndTagName(container, name, tagName) { var lst = new Array(); var eles = container.getElementsByTagName(tagName); for (var i = 0; i < eles.length; i++) { if (eles[i].name == name) { lst.push(eles[i]) } } return lst } function GetLength(obj) { var length = 0; switch (obj.type) { case "checkbox": case "radio": var form = GetClosestElement(obj, "FORM"); var nodes = null; if (form != null) { nodes = GetElementsByNameAndTagName(form, obj.name, obj.tagName) } else { nodes = document.getElementsByName(obj.name) } if ((nodes != null) && (nodes.length > 0)) { for (var i = 0; i < nodes.length; i++) { if (nodes[i].checked) { length++ } } } break; case "select-one": case "select-multiple": for (var i = 0; i < obj.options.length; i++) { if (obj.options[i].selected) { length++ } } break; default: length = obj.value.length; break } return length } var ValidateCssClass = { Succeed: "validate-succeed", Error: "validate-error", Info: "validate-info" }; var ValidateProperties = { CanEmpty: "fv-empty", DataType: "fv-datatype", Custom: "fv-custom", Format: "fv-format", MaxValue: "fv-maxvalue", MinValue: "fv-minvalue", MaxLength: "fv-maxlength", MinLength: "fv-minlength", Ajax: "fv-ajax", CompareTo: "fv-compareto", MsgPanel: "fv-msgpanel", MsgInfo: "fv-msg-info", MsgSuccess: "fv-msg-success", MsgError: "fv-msg-error", Validate: "fv-validate" }; function ValidateConfig(val, msg) { this.Message = msg; this.Value = val } function FormValidator(form) { this.Body = form } FormValidator.prototype.Init = function () { var salf = this; var onsubmit = salf.Body.onsubmit; if (onsubmit == null) { salf.Body.onsubmit = function () { return salf.Validate() } } else { salf.Body.onsubmit = function () { return salf.Validate() && onsubmit() } } if ((typeof (salf.Body.submit) == "function" || (!salf.Body.submit.tagName && !salf.Body.submit.length))) { salf.Body.originalSubmit = salf.Body.submit; salf.Body.submit = function () { if (salf.Validate()) { salf.Body.originalSubmit() } } } var inputItems = salf.Body.getElementsByTagName("input"); var selectItems = salf.Body.getElementsByTagName("select"); var textareaItems = salf.Body.getElementsByTagName("textarea"); if ((inputItems != null) && (inputItems.length > 0)) { for (var i = 0; i < inputItems.length; i++) { if ((inputItems[i].type != "submit") && (inputItems[i].type != "button") && (inputItems[i].type != "reset")) { (new ElementValidator(inputItems[i])).Init() } } } if ((selectItems != null) && (selectItems.length > 0)) { for (var i = 0; i < selectItems.length; i++) { (new ElementValidator(selectItems[i])).Init() } } if ((textareaItems != null) && (textareaItems.length > 0)) { for (var i = 0; i < textareaItems.length; i++) { (new ElementValidator(textareaItems[i])).Init() } } }; FormValidator.prototype.ShowMessage = function (msg, className) { var msgPenelId = this.Body.getAttribute(ValidateProperties.MsgPanel); var msgpanel = null; if (!DataType.String.IsNullOrWhiteSpace(msgPenelId)) { msgpanel = document.getElementById(msgPenelId) } if (msgpanel != null) { if (msgpanel.getAttribute(ValidateProperties.MsgInfo) == null) { msgpanel.setAttribute(ValidateProperties.MsgInfo, msgpanel.innerHTML) } if (DataType.String.IsNullOrWhiteSpace(msg)) { msg = msgpanel.getAttribute(ValidateProperties.MsgInfo) } msgpanel.innerHTML = msg; msgpanel.className = className; if (DataType.String.IsNullOrWhiteSpace(msg)) { msgpanel.style.visibility = "hidden" } else { msgpanel.style.visibility = "visible" } } else { if (!DataType.String.IsNullOrWhiteSpace(msg)) { alert(msg) } } }; FormValidator.prototype.SetValidateStatus = function (validateResult) { var className = null; if (validateResult == true) { removeClass(this.Body, ValidateCssClass.Error); removeClass(this.Body, ValidateCssClass.Info); className = ValidateCssClass.Succeed; msg = this.Body.getAttribute(ValidateProperties.MsgSuccess) } else { if (validateResult == false) { removeClass(this.Body, ValidateCssClass.Succeed); removeClass(this.Body, ValidateCssClass.Info); className = ValidateCssClass.Error; msg = this.Body.getAttribute(ValidateProperties.MsgError) } else { removeClass(this.Body, ValidateCssClass.Succeed); removeClass(this.Body, ValidateCssClass.Error); className = ValidateCssClass.Info; msg = null } } addClass(this.Body, className); this.ShowMessage(msg, className) }; FormValidator.prototype.Validate = function () { var inputItems = this.Body.getElementsByTagName("input"); var selectItems = this.Body.getElementsByTagName("select"); var textareaItems = this.Body.getElementsByTagName("textarea"); var chk = true; if ((inputItems != null) && (inputItems.length > 0)) { for (var i = 0; i < inputItems.length; i++) { if ((inputItems[i].type != "submit") && (inputItems[i].type != "button") && (inputItems[i].type != "reset")) { chk = (new ElementValidator(inputItems[i])).Validate() && chk } } } if ((selectItems != null) && (selectItems.length > 0)) { for (var i = 0; i < selectItems.length; i++) { chk = (new ElementValidator(selectItems[i])).Validate() && chk } } if ((textareaItems != null) && (textareaItems.length > 0)) { for (var i = 0; i < textareaItems.length; i++) { chk = (new ElementValidator(textareaItems[i])).Validate() && chk } } this.SetValidateStatus(chk); return chk }; function ElementValidator(element) { this.Body = element } ElementValidator.prototype.Init = function () { var salf = this; salf.Body.onblur = function () { salf.Validate() } }; ElementValidator.prototype.Validate = function () { return this.CheckEmpty() && this.CheckAjax() && this.CheckDataType() && this.CheckFormat() && this.CheckMaxLength() && this.CheckMinLength() && this.CheckMaxValue() && this.CheckMinValue() && this.CheckCompareTo() && this.CheckCustom() }; ElementValidator.prototype.CheckEmpty = function () { var chk = true; var config = this.GetValidateConfig(ValidateProperties.CanEmpty); if ((config != null) && (config.Value == "false")) { chk = !DataType.String.IsNullOrWhiteSpace(this.Body.value); this.SetValidateStatus(chk, config.Message) } return chk }; ElementValidator.prototype.CheckFormat = function () { var chk = true; if (!DataType.String.IsNullOrEmpty(this.Body.value)) { var config = this.GetValidateConfig(ValidateProperties.Format); if (config != null) { chk = (new RegExp(config.Value)).test(this.Body.value); this.SetValidateStatus(chk, config.Message) } } else { this.SetValidateStatus(null, null) } return chk }; ElementValidator.prototype.CheckMinLength = function () { var chk = true; if (!DataType.String.IsNullOrEmpty(this.Body.value)) { var config = this.GetValidateConfig(ValidateProperties.MinLength); if (config != null) { chk = GetLength(this.Body) >= parseInt(config.Value); this.SetValidateStatus(chk, config.Message) } } else { this.SetValidateStatus(null, null) } return chk }; ElementValidator.prototype.CheckMaxLength = function () { var chk = true; if (!DataType.String.IsNullOrEmpty(this.Body.value)) { var config = this.GetValidateConfig(ValidateProperties.MaxLength); if (config != null) { chk = GetLength(this.Body) <= parseInt(config.Value); this.SetValidateStatus(chk, config.Message) } } else { this.SetValidateStatus(null, null) } return chk }; ElementValidator.prototype.CheckDataType = function () { var chk = true; if (!DataType.String.IsNullOrEmpty(this.Body.value)) { var config = this.GetValidateConfig(ValidateProperties.DataType); if (config != null) { var type = config.Value; if (type == DataType.String.Name) { chk = true } else { if (DataType.hasOwnProperty(type)) { chk = DataType[type].CheckRange(this.Body.value) } else { alert("data type not define:" + type); throw "dta type not define!" } } this.SetValidateStatus(chk, config.Message) } } else { this.SetValidateStatus(null, null) } return chk }; ElementValidator.prototype.CheckMinValue = function () { var chk = true; if (!DataType.String.IsNullOrEmpty(this.Body.value)) { var config = this.GetValidateConfig(ValidateProperties.MinValue); if (config != null) { if (isFinite(config.Value)) { var num1 = parseFloat(config.Value); var num2 = parseFloat(this.Body.value); chk = (num2 >= num1) } else { chk = (this.Body.value <= config.Value) } this.SetValidateStatus(chk, config.Message) } } else { this.SetValidateStatus(null, null) } return chk }; ElementValidator.prototype.CheckMaxValue = function () { var chk = true; if (!DataType.String.IsNullOrEmpty(this.Body.value)) { var config = this.GetValidateConfig(ValidateProperties.MaxValue); if (config != null) { if (isFinite(config.Value)) { var num1 = parseFloat(config.Value); var num2 = parseFloat(this.Body.value); chk = (num2 <= num1) } else { chk = (this.Body.value <= config.Value) } this.SetValidateStatus(chk, config.Message) } } else { this.SetValidateStatus(null, null) } return chk }; function Compare(val1, val2) { var retval = 0; if ((val1 == null) && (val2 == null)) { retval = 0 } else { if (val1 == null) { retval = -1 } else { if (val2 == null) { retval = 1 } else { if (DataType.String.IsNullOrWhiteSpace(val1) || DataType.String.IsNullOrWhiteSpace(val2)) { val1 = val1.toString(); val2 = val2.toString() } else { if ((!isNaN(val1)) && (!isNaN(val2))) { val1 = parseFloat(val1); val2 = parseFloat(val2) } } if (val1 == val2) { retval = 0 } else { if (val1 < val2) { retval = -1 } else { retval = 1 } } } } } return retval } ElementValidator.prototype.CheckCompareTo = function () { var chk = true; var config = this.GetValidateConfig(ValidateProperties.CompareTo); if (config != null) { var ids = config.Value.split(","); if ((ids != null) && (ids.length > 1)) { var op = DataType.String.Trim(ids[0]); switch (op) { case "==": for (var i = 1; i < ids.length; i++) { chk = chk && (Compare(this.Body.value, document.getElementById(ids[i]).value) == 0); if (!chk) { break } } break; case ">": for (var i = 1; i < ids.length; i++) { chk = chk && (Compare(this.Body.value, document.getElementById(ids[i]).value) == 1); if (!chk) { break } } break; case "<": for (var i = 1; i < ids.length; i++) { chk = chk && (Compare(this.Body.value, document.getElementById(ids[i]).value) == -1); if (!chk) { break } } break; case ">=": for (var i = 1; i < ids.length; i++) { chk = chk && (Compare(this.Body.value, document.getElementById(ids[i]).value) >= 0); if (!chk) { break } } break; case "<=": for (var i = 1; i < ids.length; i++) { chk = chk && (Compare(this.Body.value, document.getElementById(ids[i]).value) <= 0); if (!chk) { break } } break; case "!=": for (var i = 1; i < ids.length; i++) { chk = chk && (Compare(this.Body.value, document.getElementById(ids[i]).value) != 0); if (!chk) { break } } break; default: throw "比较表达式有误！"; break } } else { throw "比较控件值验证设置，至少需要添加一个待比较控件的id，多个id用逗号(,)隔开。" } this.SetValidateStatus(chk, config.Message) } return chk }; ElementValidator.prototype.CheckAjax = function () { return true }; ElementValidator.prototype.CheckCustom = function () { var chk = true; var config = this.GetValidateConfig(ValidateProperties.Custom); if (config != null) { chk = eval(config.Value + "()"); this.SetValidateStatus(chk, config.Message) } return chk }; ElementValidator.prototype.GetValidateConfig = function (propertyName) { var val = this.Body.getAttribute(propertyName); if (DataType.String.IsNullOrWhiteSpace(val)) { return null } else { return new ValidateConfig(val, this.Body.getAttribute(propertyName + "-msg")) } }; ElementValidator.prototype.ShowMessage = function (msg, className) { var msgPanelId = this.Body.getAttribute(ValidateProperties.MsgPanel); if (msgPanelId != null) { var msgpanel = document.getElementById(msgPanelId); if (msgpanel != null) { if (msgpanel.getAttribute(ValidateProperties.MsgInfo) == null) { msgpanel.setAttribute(ValidateProperties.MsgInfo, msgpanel.innerHTML) } if (DataType.String.IsNullOrWhiteSpace(msg)) { msg = msgpanel.getAttribute(ValidateProperties.MsgInfo) } msgpanel.innerHTML = msg; msgpanel.className = className; if (DataType.String.IsNullOrWhiteSpace(msg)) { msgpanel.style.visibility = "hidden" } else { msgpanel.style.visibility = "visible" } } } }; ElementValidator.prototype.SetValidateStatus = function (validateResult, msg) { var className = null; if (validateResult == true) { removeClass(this.Body, ValidateCssClass.Error); removeClass(this.Body, ValidateCssClass.Info); className = ValidateCssClass.Succeed; msg = this.Body.getAttribute(ValidateProperties.MsgSuccess) } else { if (validateResult == false) { removeClass(this.Body, ValidateCssClass.Succeed); removeClass(this.Body, ValidateCssClass.Info); className = ValidateCssClass.Error; if (DataType.String.IsNullOrEmpty(msg)) { msg = this.Body.getAttribute(ValidateProperties.MsgError) } } else { removeClass(this.Body, ValidateCssClass.Succeed); removeClass(this.Body, ValidateCssClass.Error); className = ValidateCssClass.Info; msg = null } } addClass(this.Body, className); this.ShowMessage(msg, className) }; function FormValidateInit() { var forms = document.getElementsByTagName("FORM"); for (var i = 0; i < forms.length; i++) { if (forms[i].getAttribute(ValidateProperties.Validate) == "true") { new FormValidator(forms[i]).Init() } } } if (document.addEventListener) { document.addEventListener("DOMContentLoaded", FormValidateInit, false) } else { if (/MSIE/i.test(navigator.userAgent)) { document.write('<script id="__ie_onloadfix" defer src="javascript:void(0)"><\/script>'); var script = document.getElementById("__ie_onloadfix"); script.onreadystatechange = function () { if (this.readyState == "complete") { FormValidateInit() } } } else { if (/WebKit/i.test(navigator.userAgent)) { var _timer = setInterval(function () { if (/loaded|complete/.test(document.readyState)) { clearInterval(_timer); FormValidateInit() } }, 100) } else { window.onload = function (e) { FormValidateInit() } } } };